{"ast":null,"code":"var _jsxFileName = \"D:\\\\BlockChain Projects\\\\Auction Dapp Msc Project\\\\auction-dapp\\\\src\\\\App.js\";\nimport Web3 from \"web3\";\nimport Auction from './truffle_abis/Auction.json';\nimport { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport Main from \"./Components/Main\";\nimport { BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\nimport Auctioneer from \"./Components/Auctioneer/Auctioneer\";\nimport Owner from \"./Components/Owner/Owner\";\nimport RegisterAuctioneer from \"./Components/Auctioneer/RegisterAuctioneer\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  async UNSAFE_componentWillMount() {\n    await this.LoadWeb3();\n    await this.LoadBlockChain();\n  }\n  constructor(props) {\n    super(props);\n    this.LoadWeb3 = async () => {\n      if (window.ethereum) {\n        window.web3 = new Web3(window.ethereum);\n        await window.ethereum.enable();\n      } else if (window.web3) {\n        window.web3 = new Web3(window.web3.currentProvider);\n      } else {\n        window.alert('No Wallet Detected');\n      }\n    };\n    this.LoadBlockChain = async () => {\n      const web3 = window.web3;\n      const account = await web3.eth.getAccounts(); // getting account that is connected\n\n      this.setState({\n        connected_account: account\n      }); // set current metamask account to state\n      this.props.Redux_setConnectedAccount(\"setConnectedAccount\", account); // save to Redux\n\n      //Ganache Network ID\n      const networkID = await web3.eth.net.getId();\n\n      //Loading Contract\n      const ContractData = Auction.networks[networkID];\n      if (ContractData) {\n        const cont_addr = new web3.eth.Contract(Auction.abi, ContractData.address);\n        this.setState(this.state.auction_contract = cont_addr); // get contract and store it to state\n        this.props.Redux_setContract(\"setAuctionContract\", cont_addr); // save to Redux\n        this.GetAuctionOwner(); // get the address of the account that deployed the contract\n        this.setState({\n          loading: false\n        });\n      } else {\n        console.log(\"NoData\");\n      }\n    };\n    this.GetAuctionOwner = async () => {\n      const addr = await this.state.auction_contract.methods.GetOwner().call(); // get address from contract\n      this.setState({\n        auction_owner: addr\n      }); // set owner address to state\n      this.props.Redux_setOwner(\"setAuctionOwner\", addr); // save to redux\n    };\n\n    this.state = {\n      auction_owner: '0x00',\n      auction_contract: {},\n      connected_account: '0x00',\n      loading: true\n    };\n  }\n  render() {\n    let content;\n    {\n      this.state.loading ? content = /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Wait Please , Loading Data... \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 37\n      }, this) : content = /*#__PURE__*/_jsxDEV(Router, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 47\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/Auctioneer\",\n              element: /*#__PURE__*/_jsxDEV(Auctioneer, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 89,\n                columnNumber: 57\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              exact: true,\n              path: \"/Owner\",\n              element: /*#__PURE__*/_jsxDEV(Owner, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 52\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 7\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 5\n    }, this);\n  }\n}\nconst mapStatetoProps = props => {\n  return {\n    owner_acc_store: props.auction_owner,\n    // get state from redux\n    connected_acc_store: props.connected_account\n  };\n};\nconst mapPropstoState = dispatch => {\n  return {\n    Redux_setOwner: (type, obj) => dispatch({\n      type,\n      obj\n    }),\n    // set state in redux\n    Redux_setContract: (type, obj) => dispatch({\n      type,\n      obj\n    }),\n    // set state in redux\n    Redux_setConnectedAccount: (type, obj) => dispatch({\n      type,\n      obj\n    }) // set state in redux\n  };\n};\n\nexport default connect(mapStatetoProps, mapPropstoState)(App);","map":{"version":3,"names":["Web3","Auction","Component","connect","Main","BrowserRouter","Router","Routes","Route","Navigate","Auctioneer","Owner","RegisterAuctioneer","App","UNSAFE_componentWillMount","LoadWeb3","LoadBlockChain","constructor","props","window","ethereum","web3","enable","currentProvider","alert","account","eth","getAccounts","setState","connected_account","Redux_setConnectedAccount","networkID","net","getId","ContractData","networks","cont_addr","Contract","abi","address","state","auction_contract","Redux_setContract","GetAuctionOwner","loading","console","log","addr","methods","GetOwner","call","auction_owner","Redux_setOwner","render","content","mapStatetoProps","owner_acc_store","connected_acc_store","mapPropstoState","dispatch","type","obj"],"sources":["D:/BlockChain Projects/Auction Dapp Msc Project/auction-dapp/src/App.js"],"sourcesContent":["\nimport Web3 from \"web3\";\nimport Auction from './truffle_abis/Auction.json';\nimport { Component} from 'react';\nimport { connect } from \"react-redux\";\nimport Main from \"./Components/Main\";\nimport { BrowserRouter as Router, Routes, Route , Navigate  } from 'react-router-dom';\nimport Auctioneer from \"./Components/Auctioneer/Auctioneer\";\nimport Owner from \"./Components/Owner/Owner\";\nimport RegisterAuctioneer from \"./Components/Auctioneer/RegisterAuctioneer\";\nclass App extends Component{\n\n  async UNSAFE_componentWillMount(){\n    await this.LoadWeb3();\n    await this.LoadBlockChain();\n  }\n    LoadWeb3 = async()=>{\n    if(window.ethereum)\n    {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    }\n    else if(window.web3)\n    {\n      window.web3 = new Web3 (window.web3.currentProvider)\n    }\n    else{\n      window.alert('No Wallet Detected');\n    }\n  }\n\n   LoadBlockChain=async()=>{\n     \n    const web3 = window.web3\n    const account = await web3.eth.getAccounts(); // getting account that is connected\n   \n    this.setState({connected_account:account}); // set current metamask account to state\n    this.props.Redux_setConnectedAccount(\"setConnectedAccount\",account); // save to Redux\n\n    //Ganache Network ID\n    const networkID = await web3.eth.net.getId();\n\n    //Loading Contract\n    const ContractData = Auction.networks[networkID];\n    \n    if(ContractData){\n      const cont_addr = new web3.eth.Contract(Auction.abi,ContractData.address);\n      this.setState(this.state.auction_contract=cont_addr); // get contract and store it to state\n      this.props.Redux_setContract(\"setAuctionContract\",cont_addr); // save to Redux\n      this.GetAuctionOwner(); // get the address of the account that deployed the contract\n      this.setState({loading : false});\n    }\n    else\n    {\n      console.log(\"NoData\");\n    }\n  }\n\n   GetAuctionOwner = async ()=>\n  {\n    \n    const addr = await this.state.auction_contract.methods.GetOwner().call(); // get address from contract\n    this.setState({auction_owner:addr}); // set owner address to state\n    this.props.Redux_setOwner(\"setAuctionOwner\",addr); // save to redux\n    \n    \n  }\n\n  constructor(props){\n    super(props)\n    this.state={\n      auction_owner : '0x00',\n      auction_contract:{},\n      connected_account:'0x00',\n      loading:true\n      \n    };\n  }\n  render(){\n    let content\n    {\n      this.state.loading ?content = <h1>Wait Please , Loading Data... </h1>\n      :\n      content=\n      <Router>\n          <div>\n            <Routes>\n              <Route exact path =\"/\" element={<Main/>}></Route>\n              <Route exact path =\"/Auctioneer\" element={<Auctioneer/>}></Route>\n              <Route exact path =\"/Owner\" element={<Owner/>}></Route>\n            </Routes>\n          </div>\n        </Router>\n    }\n  return(\n    <div>\n      {content}\n    </div>\n    \n  );\n  }\n}\n\nconst mapStatetoProps=(props)=>{\n     return{\n        owner_acc_store : props.auction_owner, // get state from redux\n        connected_acc_store:props.connected_account\n     }\n}\nconst mapPropstoState =(dispatch)=>{\n    return{\n        Redux_setOwner :(type,obj)=>dispatch({type,obj}), // set state in redux\n        Redux_setContract :(type,obj)=>dispatch({type,obj}), // set state in redux\n        Redux_setConnectedAccount :(type,obj)=>dispatch({type,obj}) // set state in redux\n    }\n}\nexport default connect(mapStatetoProps,mapPropstoState)(App);\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}